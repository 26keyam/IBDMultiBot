# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j3E5f7XJf4enBqcfDmHEWOZPQhLSirv2
"""

from openai import OpenAI
import streamlit as st
from text_graph import graph_streamer
from langchain_core.messages import AIMessage, HumanMessage

from PIL import Image
from image_graph import graph_streamer

IMAGE_ADDRESS = "https://upload.wikimedia.org/wikipedia/commons/1/1a/Irritable_bowel_syndrome.jpg"

def message_creator(list_of_messages: list) -> list:
    prompt_messages = []
    for message in list_of_messages:
        if message["role"] == "user":
            prompt_messages.append(HumanMessage(content = message["content"]))
        else:
            prompt_messages.append(AIMessage(content = message["content"]))

    return prompt_messages

# set the title
st.title("GastroGuide")
# set the image
st.image(IMAGE_ADDRESS, caption = 'IBD Supporter')

st.subheader("Chat with Us 🤖")


if "messages" not in st.session_state:
    st.session_state.messages = []

for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# input from the user
if prompt := st.chat_input("What is up?"):
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    # content manager for displaying appropriate message
    with st.chat_message("assistant"):
        message_list = message_creator(st.session_state.messages)
        print("Message List", message_list)
        response = st.write_stream(text_graph.graph_streamer(message_list))
    st.session_state.messages.append({"role": "assistant", "content": response})

# Upload image
uploaded_file = st.file_uploader("Choose an image...", type=["jpg", "jpeg", "png"])

if uploaded_file:
    # open the image
    image = Image.open(uploaded_file)

    # display the image
    st.header("Uploaded Image")
    st.image(image, caption='Uploaded Image.', use_container_width=True)

    # save the image as a PNG file
    image.save(IMAGE_NAME)

    # analyse the image
    with st.spinner("Generating Information......"):
        get_chip_type = st.write_stream(image_graph.graph_streamer(IMAGE_NAME))
        st.toast('Information Generation Successful!', icon='✅')

    if not get_chip_type:
        st.error("Cannot Interpret the Image", icon = "❌")
        st.stop()